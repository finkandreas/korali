#include "engine.hpp"
#include "modules/solver/agent/continuous/SAC/SAC.hpp"
#include "omp.h"
#include "sample/sample.hpp"

#include <gsl/gsl_sf_psi.h>

__startNamespace__;

void __className__::initializeAgent()
{
  // Initializing common discrete agent configuration
  Continuous::initializeAgent();

  // Init statistics
  _statisticsAverageActionSigmas.resize(_problem->_actionVectorSize);

  /*********************************************************************
   * Initializing Policy Neural Network Optimization Experiment
   *********************************************************************/

  _policyExperiment["Problem"]["Type"] = "Supervised Learning";
  _policyExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _policyExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _policyExperiment["Problem"]["Inference Batch Size"] = 1;
  _policyExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _policyExperiment["Problem"]["Solution"]["Size"] = _policyParameterCount;

  _policyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _policyExperiment["Solver"]["L2 Regularization"]["Enabled"] = _l2RegularizationEnabled;
  _policyExperiment["Solver"]["L2 Regularization"]["Importance"] = _l2RegularizationImportance;
  _policyExperiment["Solver"]["Learning Rate"] = _currentLearningRate;
  _policyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _policyExperiment["Solver"]["Steps Per Generation"] = 1;
  _policyExperiment["Solver"]["Neural Network"]["Optimizer"] = _neuralNetworkOptimizer;
  _policyExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _policyExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _policyExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Setting transformations for the selected policy distribution output
  for (size_t i = 0; i < _policyParameterCount; i++)
  {
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][i] = _policyParameterScaling[i];
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][i] = _policyParameterShifting[i];
    _policyExperiment["Solver"]["Neural Network"]["Output Layer"]["Transformation Mask"][i] = _policyParameterTransformationMasks[i];
  }

  // Running initialization to verify that the configuration is correct
  _policyExperiment.initialize();
  _policyProblem = dynamic_cast<problem::SupervisedLearning *>(_policyExperiment._problem);
  _policyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_policyExperiment._solver);
 
  /*********************************************************************
   * Initializing Critic Neural Network Optimization Experiment
   *********************************************************************/

  _criticExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _criticExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _criticExperiment["Problem"]["Inference Batch Size"] = 1;
  _criticExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize + _problem->_actionVectorSize;
  _criticExperiment["Problem"]["Solution"]["Size"] = _policyParameterCount;

  _criticExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticExperiment["Solver"]["L2 Regularization"]["Enabled"] = _l2RegularizationEnabled;
  _criticExperiment["Solver"]["L2 Regularization"]["Importance"] = _l2RegularizationImportance;
  _criticExperiment["Solver"]["Learning Rate"] = _currentLearningRate;
  _criticExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticExperiment["Solver"]["Neural Network"]["Optimizer"] = _neuralNetworkOptimizer;
  _criticExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _criticExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _criticExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // No transformation for the q value
  _criticExperiment["Solver"]["Neural Network"]["Output Layer"]["Scale"][0] = 1.;
  _criticExperiment["Solver"]["Neural Network"]["Output Layer"]["Shift"][0] = 0.;
  _criticExperiment["Solver"]["Neural Network"]["Output Layer"]["Transformation Mask"][0] = "Identity";

  // Running initialization to verify that the configuration is correct
  _criticExperiment.initialize();
  _criticProblem = dynamic_cast<problem::SupervisedLearning *>(_criticExperiment._problem);
  _criticLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticExperiment._solver);

  // Init containter for statistics
  _maxMiniBatchPolicyMean.resize(_problem->_actionVectorSize);
  _maxMiniBatchPolicyStdDev.resize(_problem->_actionVectorSize);

  _minMiniBatchPolicyMean.resize(_problem->_actionVectorSize);
  _minMiniBatchPolicyStdDev.resize(_problem->_actionVectorSize);
}

void __className__::trainPolicy()
{
  // Obtaining Minibatch experience ids
  const auto miniBatch = generateMiniBatch(_miniBatchSize);

  // Gathering state action sequences for selected minibatch
  const auto stateActionSequence = getMiniBatchStateSequence(miniBatch, true);

  // Sample state action sequences for selected minibatch
  const auto sampledStateActionSequence = sampleStateActionBatchSequence(miniBatch);

  // Running policy NN on the Minibatch experiences
  const auto policyInfo = runPolicy(stateActionSequence);

  // Using policy information to update experience's metadata
  updateExperienceMetadata(miniBatch, policyInfo);

  // Now calculating critic gradients
  calculateCriticGradient(miniBatch);
 
  // Updating learning rate for critic learner guided by REFER
  _criticLearner->_learningRate = _currentLearningRate;

  // Now applying gradients to update policy NN
  _criticLearner->runGeneration();
  
  // Now calculating critic gradients
  calculatePolicyGradient(sampledStateActionSequence, miniBatch);
      
  // Updating learning rate for policy learner guided by REFER
  _policyLearner->_learningRate = _currentLearningRate;

  // Now applying gradients to update policy NN
  _policyLearner->runGeneration();
}

void __className__::calculateCriticGradient(const std::vector<size_t> &miniBatch)
{
  const size_t miniBatchSize = miniBatch.size();

#pragma omp parallel for
  for (size_t b = 0; b < miniBatchSize; b++)
  {
    std::vector<float> gradientLoss(1, 0.);
    
    // Getting index of current experiment
    size_t expId = miniBatch[b];

    // Gathering metadata
    const float V = _stateValueVector[expId];
    const float expVtbc = _retraceValueVector[expId];

    // Gradient of Q Function Q(s,a) (step. (13); *-1 because the optimizer is maximizing)
    gradientLoss[0] += 2. * (expVtbc - V);
    
    _criticProblem->_solutionData[b] = gradientLoss;
  }
}

void __className__::calculatePolicyGradient(const std::vector<std::vector<std::vector<float>>> &sampledStateAction, const std::vector<size_t> &miniBatch)
{
  
  // std::fill(_statisticsAverageActionSigmas.begin(), _statisticsAverageActionSigmas.end(), 0.0);
  const size_t miniBatchSize = miniBatch.size();

#pragma omp parallel for
  for (size_t b = 0; b < miniBatchSize; b++)
  {
    std::vector<float> gradientLoss(_policyParameterCount, 0.);
    
    // Getting index of current experiment
    size_t expId = miniBatch[b];

    const auto &curPolicy = _curPolicyVector[expId];
    
    // Gradient of Q Function Q(s,a) (step. (14); *-1 because the optimizer is maximizing)
    if (_policyDistribution == "Normal")
    {
      for (size_t i = 0; i < _problem->_actionVectorSize; i++)
      {
        const float mu = curPolicy.distributionParameters[i];
        const float sigma = curPolicy.distributionParameters[_problem->_actionVectorSize+i];
        const float invSigma = 1./sigma;
        
        // Gradient of output wrt mean
        gradientLoss[i] += (sampledStateAction[b][0][i] - mu) * invSigma * invSigma;
        
        // Gradient of output wrt sig
        gradientLoss[_problem->_actionVectorSize+i] += -invSigma + (sampledStateAction[b][0][i] - mu)*(sampledStateAction[b][0][i] - mu) * invSigma * invSigma * invSigma;
      }
    }
    else if(_policyDistribution == "Clipped Normal")
    {
      for (size_t i = 0; i < _problem->_actionVectorSize; i++)
      {
        const float mu = curPolicy.distributionParameters[i];
        const float sigma = curPolicy.distributionParameters[_problem->_actionVectorSize+i];
        const float invSigma = 1./sigma;
        const float action = sampledStateAction[b][0][i];
        
        if (action <= _actionLowerBounds[i])
        {
          // gradient mu: -pdf
          gradientLoss[i] -= normalLogDensity(action, mu, sigma);
          // gradient sig: -(x-mu)/sigma*pdf
          gradientLoss[_problem->_actionVectorSize+i] -= (action-mu)*invSigma*normalLogDensity(action, mu, sigma);
        }
        else if (action >= _actionUpperBounds[i])
        {
          // gradient mu: pdf
          gradientLoss[i] += normalLogDensity(action, mu, sigma);
          // gradient sig: (x-mu)/sigma*pdf
          gradientLoss[_problem->_actionVectorSize+i] += (action-mu)*invSigma*normalLogDensity(action, mu, sigma);
        }
        else
        {
          // Gradient of output wrt mean
          gradientLoss[i] += (action - mu) * invSigma * invSigma;
          // Gradient of output wrt sig
          gradientLoss[_problem->_actionVectorSize+i] += -invSigma + (action - mu)*(action - mu) * invSigma * invSigma * invSigma;
        }
      }
    }
    else
    {
      KORALI_LOG_ERROR("Policy Gradient not yet implemented for selected policy distribution");
    }
    
    _criticProblem->_solutionData[b] = gradientLoss;
  }


}

std::vector<policy_t> __className__::runPolicy(const std::vector<std::vector<std::vector<float>>> &stateActionBatchSequence)
{
  // Getting batch size
  size_t batchSize = stateActionBatchSequence.size();

  // Storage for policy
  std::vector<policy_t> policyVector(batchSize);

  // Forward the neural network for this state action pair
  const auto qValues = _criticLearner->getEvaluation(stateActionBatchSequence);

#pragma omp parallel for
  for (size_t b = 0; b < batchSize; b++)
  {
    // Getting state value
    policyVector[b].stateValue = qValues[b][0];

    // Getting distribution parameters
    // policyVector[b].distributionParameters.assign(evaluation[b].begin() + 1, evaluation[b].end());
  }

  return policyVector;
}

std::vector<std::vector<std::vector<float>>> __className__::sampleStateActionBatchSequence(const std::vector<size_t> &miniBatch)
{
  // Getting batch size
  size_t batchSize = miniBatch.size();
    
  std::vector<std::vector<std::vector<float>>> sampledStateActionBatchSequence(batchSize);
  for (size_t b = 0; b < batchSize; b++)
  {
    auto& curPolicy = _curPolicyVector[miniBatch[b]];
    const auto& action = generateTrainingAction(curPolicy);
    
    auto stateAction = _stateVector[miniBatch[b]];
    stateAction.insert(stateAction.end(), action.begin(), action.end()); 

    sampledStateActionBatchSequence[b] = {stateAction}; //TODO: add sequence
  }

  return sampledStateActionBatchSequence;
}


knlohmann::json __className__::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _policyLearner->getHyperparameters();
  return hyperparameters;
}

void __className__::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  _policyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void __className__::printAgentInformation()
{
  _k->_logger->logInfo("Normal", " + [VRACER] Policy Learning Rate: %.3e\n", _currentLearningRate);
  _k->_logger->logInfo("Detailed", " + [VRACER] Max Policy Parameters (Mu & Sigma):\n");
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    _k->_logger->logInfo("Detailed", " + [VRACER] Action %zu: (%.3e,%.3e)\n", i, _maxMiniBatchPolicyMean[i], _maxMiniBatchPolicyStdDev[i]);
  _k->_logger->logInfo("Detailed", " + [VRACER] Min Policy Parameters (Mu & Sigma):\n");
  for (size_t i = 0; i < _problem->_actionVectorSize; i++)
    _k->_logger->logInfo("Detailed", " + [VRACER] Action %zu: (%.3e,%.3e)\n", i, _minMiniBatchPolicyMean[i], _minMiniBatchPolicyStdDev[i]);
}

__moduleAutoCode__;

__endNamespace__;
